#!/usr/local/bin/env python
# Author: dreamclinger@gmail.com
# Create: 2014/12/08
# Bucket sort assumes that the input is generated by a random process that distributes elements uniformly and independently over the interval [0,1). page 201.
# If n is too large or too small, what occurs? figure.8.4 


from random import sample, randint, random
from math import floor

class prettyfloat(float): ## format float number print
    def __repr__(self):
        return "%0.2f" % self

def concatenate(L): ##flatten 2D list to 1D list
    C = []
    for i in range(0,len(L)):
        for element in L[i]:
            C.append(element)
    return C

def insertsort(A):
    for j in range(1,len(A)):
        key = A[j]
        i = j - 1
        while i >= 0 and A[i] > key:
            A[i+1] = A[i]
            i = i - 1
        A[i+1] = key

def bucketsort(A):  ## like hash tree
    n = len(A)      ## you can also limit n = 10 as page 201
    B = [0]*(n) ## create B[0...n-1], init empty. B will be 2D list
    for i in range(0,n): 
        B[i] = []
    for i in range(0,n): ## B[floor(n*A[i])] = A[i]
        B[int(floor(n*A[i]))].append(A[i])
    for i in range(0,n): 
        insertsort(B[i])
    C = concatenate(B) ## concatenate the lists B[0]...B[n-1]
    return C

if __name__ == '__main__':
    Array = []
    for i in range(0,10):
        Array.append(random())   ## normal random var in [0,1)
    print 'before sort: ', map(prettyfloat, Array)
    Newarray = bucketsort(Array)
    print 'after sort:  ', map(prettyfloat, Newarray)
